/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package zm.vul_prediction;

import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import java.time.format.DateTimeFormatter;  
import java.time.LocalDateTime; 
import weka.core.Utils;

/**
 * Set filter for the file chooser
 * From stackoverflow with some change :)
 *
*/
class MyCustomFilter extends javax.swing.filechooser.FileFilter {
        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with ".arff" extension
            return file.isDirectory() || file.getAbsolutePath().endsWith(".arff");
        }
        @Override
        public String getDescription() {
            // This description will be displayed in the dialog,
            // hard-coded = ugly, should be done via I18N
            return "ARFF Files (*.arff)";
        }
    }

/**
 *
 * @author zm
 */
public class ML_JFrame extends javax.swing.JFrame  {

    /**
     * Creates new form Main_JFrame
     */
    public ML_JFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Select_Dataset_jFileChooser = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        Classifier_jComboBox = new javax.swing.JComboBox<>();
        Dataset_jTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Results_jTextArea = new javax.swing.JTextArea();
        Slect_File_jButton = new javax.swing.JButton();
        Execute_jButton = new javax.swing.JButton();
        Fold_Number_jTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        Balance_Dataset_jCheckBox = new javax.swing.JCheckBox();
        Exit_jButton = new javax.swing.JButton();
        All_Exp_jButton = new javax.swing.JButton();

        Select_Dataset_jFileChooser.setDialogTitle("Please select the Dataset ");
        Select_Dataset_jFileChooser.setFileFilter(new MyCustomFilter());
        Select_Dataset_jFileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Select_Dataset_jFileChooserActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("Main_frame"); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Vulnerabilities Prediction"));
        jPanel1.setName(""); // NOI18N

        jLabel1.setText("Classifier :");

        jLabel2.setText("Dataset   :");

        Classifier_jComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Random Forest", "Decision Tree", "KNN", "Naive Bayes", "SVM", "Logistic", " " }));
        Classifier_jComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Classifier_jComboBoxActionPerformed(evt);
            }
        });

        jLabel3.setText("Results :");

        Results_jTextArea.setColumns(20);
        Results_jTextArea.setRows(5);
        jScrollPane1.setViewportView(Results_jTextArea);

        Slect_File_jButton.setText("Select...");
        Slect_File_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Slect_File_jButtonActionPerformed(evt);
            }
        });

        Execute_jButton.setText("Execute");
        Execute_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Execute_jButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Folds number");

        Balance_Dataset_jCheckBox.setText("Balance Dataset");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Classifier_jComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(Dataset_jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Balance_Dataset_jCheckBox)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Slect_File_jButton, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                            .addComponent(Execute_jButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(58, 58, 58))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 647, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Fold_Number_jTextField)
                        .addGap(320, 320, 320))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(Classifier_jComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(Dataset_jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Slect_File_jButton)
                    .addComponent(Balance_Dataset_jCheckBox))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(Execute_jButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(Fold_Number_jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37))
        );

        Exit_jButton.setText("Exit");
        Exit_jButton.setName(""); // NOI18N
        Exit_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Exit_jButtonActionPerformed(evt);
            }
        });

        All_Exp_jButton.setText("All experiments");
        All_Exp_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                All_Exp_jButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(187, 187, 187)
                .addComponent(All_Exp_jButton, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Exit_jButton, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 668, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Exit_jButton)
                    .addComponent(All_Exp_jButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Exit_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Exit_jButtonActionPerformed
        this.dispose();
        new Start_JFrame().setVisible(true);
    }//GEN-LAST:event_Exit_jButtonActionPerformed

    private void Select_Dataset_jFileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Select_Dataset_jFileChooserActionPerformed
        // TODO add your handling code here:
   
    }//GEN-LAST:event_Select_Dataset_jFileChooserActionPerformed

    @SuppressWarnings("empty-statement")
    private void Execute_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Execute_jButtonActionPerformed
        try {
            //  TODO add your handling code here:

            Pred_Model PModel1;
            String classifier;
            String Selected_Classifier;
            String filter;
            Vector<String> classifierOptions = new Vector<String>();
            //Vector<String> filterOptions = new Vector<String>();
            String[] filterOptions;
           
            
            String dataset;
            int Fold_Number;// nombre des folds (validation croisée)
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");  
            LocalDateTime now;
            String Start_Time = "";
            String End_Time="";
            
            

            Selected_Classifier = Classifier_jComboBox.getSelectedItem().toString();

            if("Random Forest".equals(Selected_Classifier)){

                classifier = "weka.classifiers.trees.RandomForest";
            }
            else if ("Decision Tree".equals(Selected_Classifier)){

                classifier = "weka.classifiers.trees.J48";
            }
            else if ("KNN".equals(Selected_Classifier)){

                classifier = "weka.classifiers.lazy.IBk";
            }
            else if ("Naive Bayes".equals(Selected_Classifier)){

                classifier = "weka.classifiers.bayes.NaiveBayes";
            }
            else if ("SVM".equals(Selected_Classifier)){

                classifier = "weka.classifiers.functions.SMO";
            }
            else if ("Logistic".equals(Selected_Classifier)){

                classifier = "weka.classifiers.functions.Logistic";
            }
            else{
                Results_jTextArea.setText("Please select a valid classifier");
                return;
            }

            if( Dataset_jTextField.getText().equals("")){
                Results_jTextArea.setText("Please select a valid ARFF file");
                return;
            }
            else {
                dataset = Dataset_jTextField.getText();
            }

            if( Fold_Number_jTextField.getText().equals("")){
                Results_jTextArea.setText("Please indicate the Folds number");
                return;
            }
            else {
                Fold_Number = Integer.parseInt(Fold_Number_jTextField.getText());
            }

            filter = "weka.filters.supervised.instance.SpreadSubsample";

            boolean Balance_Dataset = false; 
            if( Balance_Dataset_jCheckBox.isSelected())
            {
                filterOptions = Utils.splitOptions("-M 1.0 -X 0.0 -S 1");
                Balance_Dataset = true;
            }
            else
            {
                filterOptions = Utils.splitOptions("");
                Balance_Dataset = false;
            }
            // everything provided?
            if (classifier.equals("") || filter.equals("") || dataset.equals("")) {
                Results_jTextArea.setText("Not all parameters provided!");

            }

            // run

            Results_jTextArea.setText("Processing ...Please wait");
            
            dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");  
            now = LocalDateTime.now();  
            Start_Time = dtf.format(now).toString();
            
            
            PModel1 = new Pred_Model();
            PModel1.setClassifier(classifier,
                classifierOptions.toArray(new String[classifierOptions.size()]));
            /*PModel1.setFilter(filter,
                filterOptions.toArray(new String[filterOptions.size()])filterOptions );*/
            PModel1.setFilter(filter, filterOptions );
            PModel1.setTraining(dataset);
            PModel1.execute(Fold_Number);
            
            now = LocalDateTime.now();  
            End_Time = dtf.format(now).toString();
            
            String Exprement_Details = "Dataset : " + Dataset_jTextField.getText() + "\n" +
                        "Balanced data : " + Balance_Dataset + "\n"+
                        "Cross-Validation :"+ Fold_Number_jTextField.getText() +"Folds" + "\n";
            
            Results_jTextArea.setText(Exprement_Details + "\n" + PModel1.toString() +
                    "\n" +
                    "Start Time :" +
                    Start_Time +
                    "\n" +
                    "End Time :" +
                    End_Time        
                    );
            
            // save model to file
            dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd_HH-mm-ss");  
            now = LocalDateTime.now();  
            String Results_Time = dtf.format(now);
                
            
            try (ObjectOutputStream oos = new ObjectOutputStream(
                    new FileOutputStream("MODEL_"+Results_Time+".model"))) {
                oos.writeObject(PModel1.m_Classifier);
                oos.flush();
                
            }
                              
            // save results to txt file    
            try (FileWriter outFile = new FileWriter("RESULTS_"+Results_Time+".txt",true)) {
                    outFile.write(Results_jTextArea.getText());
            }
            
            
        } catch (Exception ex) {
            Logger.getLogger(ML_JFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_Execute_jButtonActionPerformed

    private void Slect_File_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Slect_File_jButtonActionPerformed
        // TODO add your handling code here:

        int returnVal = Select_Dataset_jFileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = Select_Dataset_jFileChooser.getSelectedFile();
            Dataset_jTextField.setText(file.getAbsolutePath());

        } else {
            //System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_Slect_File_jButtonActionPerformed

    private void Classifier_jComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Classifier_jComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Classifier_jComboBoxActionPerformed

    private void All_Exp_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_All_Exp_jButtonActionPerformed
        // TODO add your handling code here:
       try {
				//  TODO add your handling code here:

				
				
            String All_Results="";
            
            All_Results = All_Results + "Experiment#1 (RF , FC) :\n";
            All_Results = All_Results + Do_Experiment ("weka.classifiers.trees.RandomForest",
                    "D:\\ZM\\Doctorat\\Mon_Travail\\Applications\\ZM_SCM_SySe_CG\\ZM_SCM_SySe_CG\\projects\\SYSE\\API_function_call.syse.arff");
            
            All_Results= All_Results + "\n";
            
            All_Results =  All_Results + "Experiment#2 (RF , AE) :\n";
            All_Results = All_Results + Do_Experiment ("weka.classifiers.trees.RandomForest",
                    "D:\\ZM\\Doctorat\\Mon_Travail\\Applications\\ZM_SCM_SySe_CG\\ZM_SCM_SySe_CG\\projects\\SYSE\\Arithmetic_expression.syse.arff");
            
            All_Results= All_Results + "\n";
            
            All_Results = All_Results + "Experiment#3 (RF , AU) :\n";
            All_Results = All_Results + Do_Experiment ("weka.classifiers.trees.RandomForest",
                    "D:\\ZM\\Doctorat\\Mon_Travail\\Applications\\ZM_SCM_SySe_CG\\ZM_SCM_SySe_CG\\projects\\SYSE\\Array_usage.syse.arff");
             
            All_Results= All_Results + "\n";
            
            All_Results = All_Results + "Experiment#4 (KNN , FC) :\n";
            All_Results = All_Results + Do_Experiment ("weka.classifiers.lazy.IBk",
                    "D:\\ZM\\Doctorat\\Mon_Travail\\Applications\\ZM_SCM_SySe_CG\\ZM_SCM_SySe_CG\\projects\\SYSE\\API_function_call.syse.arff");
            
            All_Results= All_Results + "\n";
            
            All_Results = All_Results + "Experiment#5 (KNN , AE) :\n";
            All_Results = All_Results + Do_Experiment ("weka.classifiers.lazy.IBk",
                    "D:\\ZM\\Doctorat\\Mon_Travail\\Applications\\ZM_SCM_SySe_CG\\ZM_SCM_SySe_CG\\projects\\SYSE\\Arithmetic_expression.syse.arff");
            
            All_Results= All_Results + "\n";
            
            All_Results = All_Results + "Experiment#6 (KNN , AU) :\n";
            All_Results = All_Results + Do_Experiment ("weka.classifiers.lazy.IBk",
                    "D:\\ZM\\Doctorat\\Mon_Travail\\Applications\\ZM_SCM_SySe_CG\\ZM_SCM_SySe_CG\\projects\\SYSE\\Array_usage.syse.arff");
             
            All_Results= All_Results + "\n";
            
            All_Results = All_Results + "Experiment#7 (TREE , FC) :\n";
            All_Results = All_Results + Do_Experiment ("weka.classifiers.trees.J48",
                    "D:\\ZM\\Doctorat\\Mon_Travail\\Applications\\ZM_SCM_SySe_CG\\ZM_SCM_SySe_CG\\projects\\SYSE\\API_function_call.syse.arff");
            
            All_Results= All_Results + "\n";
            
            All_Results = All_Results + "Experiment#8 (TREE , AE) :\n";
            All_Results = All_Results + Do_Experiment ("weka.classifiers.trees.J48",
                    "D:\\ZM\\Doctorat\\Mon_Travail\\Applications\\ZM_SCM_SySe_CG\\ZM_SCM_SySe_CG\\projects\\SYSE\\Arithmetic_expression.syse.arff");
            
            All_Results= All_Results + "\n";
            
            All_Results = All_Results + "Experiment#9 (TREE , AU) :\n";
            All_Results = All_Results + Do_Experiment ("weka.classifiers.trees.J48",
                    "D:\\ZM\\Doctorat\\Mon_Travail\\Applications\\ZM_SCM_SySe_CG\\ZM_SCM_SySe_CG\\projects\\SYSE\\Array_usage.syse.arff");
             
            All_Results= All_Results + "\n";
            
            
            
            Results_jTextArea.setText(All_Results);
        } catch (Exception ex) {
            Logger.getLogger(ML_JFrame.class.getName()).log(Level.SEVERE, null, ex);
        } 
        
        
    }//GEN-LAST:event_All_Exp_jButtonActionPerformed
    
    @SuppressWarnings("empty-statement")
    private String Do_Experiment(String Classifier, String Dataset_Path) {                                                
        
        String Results = "";
        try {
            Pred_Model PModel1;
            String filter;
            int Fold_Number = 10;// nombre des folds (validation croisée)
            filter = "weka.filters.supervised.instance.SpreadSubsample";
           
            Vector<String> classifierOptions = new Vector<String>();
            Vector<String> filterOptions = new Vector<String>();

            // run

            PModel1 = new Pred_Model();
            PModel1.setClassifier(Classifier,
                classifierOptions.toArray(new String[classifierOptions.size()]));
            PModel1.setFilter(filter,
                filterOptions.toArray(new String[filterOptions.size()]));
            PModel1.setTraining(Dataset_Path);
            PModel1.execute(Fold_Number);
            
            Results = PModel1.toString();
            
        } catch (Exception ex) {
            Logger.getLogger(ML_JFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        return Results;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ML_JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ML_JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ML_JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ML_JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ML_JFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton All_Exp_jButton;
    private javax.swing.JCheckBox Balance_Dataset_jCheckBox;
    private javax.swing.JComboBox<String> Classifier_jComboBox;
    private javax.swing.JTextField Dataset_jTextField;
    private javax.swing.JButton Execute_jButton;
    private javax.swing.JButton Exit_jButton;
    private javax.swing.JTextField Fold_Number_jTextField;
    private javax.swing.JTextArea Results_jTextArea;
    private javax.swing.JFileChooser Select_Dataset_jFileChooser;
    private javax.swing.JButton Slect_File_jButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
